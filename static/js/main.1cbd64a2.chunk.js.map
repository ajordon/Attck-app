{"version":3,"sources":["assets/starwars.png","components/nameBox.js","components/filmTile.js","components/characterSearch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Namebox","props","handleClick","value","name","type","className","onClick","FilmTile","state","filmData","fetch","this","film","then","res","json","data","setState","error","console","log","date","Date","toLocaleString","weekday","year","month","day","key","title","episode_id","director","release_date","formatDate","React","Component","CharacterSearch","selectedCharacter","errors","results","isLoaded","handleSubmit","bind","handleChange","e","preventDefault","target","person","films","class","map","i","handleResults","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cbd64a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starwars.78ea37bf.png\";","import React from 'react';\n\nconst Namebox = props => {\n\tconst { handleClick, value, name } = props\n\treturn (\n\t\t<button type=\"button\" className=\"btn-box\" onClick={handleClick} value={value} name={name}>{name}</button>\n\t)\n};\n\nexport default Namebox;\n","import React from 'react';\n\nclass FilmTile extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfilmData: {},\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\ttry {\n\t\t\tfetch(this.props.film)\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then((data => {\n\t\t\t\tthis.setState({ \n\t\t\t\t\t\tfilmData: data,\n\t\t\t\t});\n\t\t\t}));\n\t\t}\n\t\tcatch(error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tformatDate(date) {\n\t\tlet d = new Date(date);\n\t\tconst options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\t\treturn d.toLocaleString('en-US', options);\n\t}\n\n\trender() {\n\t\tconst { filmData, key } = this.state;\n\t\treturn (\n\t\t\t<div className=\"column\">\n\t\t\t\t<div className='filmTile' key={key}>\n\t\t\t\t\t<h3>{filmData.title} : Episode {filmData.episode_id}</h3>\n\t\t\t\t\t<div className=\"filmDetails\">\n\t\t\t\t\t\t<p>Directed by:</p><h4>{filmData.director}</h4>\n\t\t\t\t\t\t<p>Released on:</p><h4>{!filmData.release_date ? '-' \n\t\t\t\t\t\t\t: this.formatDate(filmData.release_date)}</h4>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)}\n}\nexport default FilmTile;","import React from 'react';\nimport NameBox from './nameBox';\nimport FilmTile from './filmTile';\n\nclass CharacterSearch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\t\t\t\t\tselectedCharacter: '',\n\t\t\t\t\terrors: '',\n\t\t\t\t\tresults: [],\n\t\t\t\t\tisLoaded: true\n\t\t\t\t};\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);    \n    }\n\n    handleChange(e) {\n\t\t\te.preventDefault();\n\t\t\tconst value = e.target.value;\t\t\t\n\t\t\tthis.setState({selectedCharacter: e.target.name, results: [], isLoaded: false});\n\t\t\tthis.handleSubmit(value);\n    }\n\n    handleSubmit(person) {\n\t\t\tconst BASE_URL = \"https://swapi.co/api/people/\";\n\t\t\ttry {\n\t\t\t\tfetch(BASE_URL + person)\n\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t.then((data => {\n\t\t\t\t\t\tthis.setState({ \n\t\t\t\t\t\t\tresults: data.films,\n\t\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}\n\t\t\tcatch(error) {\n\t\t\t\tthis.setState({errors: error})\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\n\t\thandleResults() {\n\t\t\treturn !this.state.results ? <></>\n\t\t\t\t: <div class=\"lds-dual-ring\"></div>\n\t\t}\n\n\t\trender() {\n\t\t\tconst { results, selectedCharacter, isLoaded } = this.state;\n\t\t\treturn(\n\t\t\t\t<div className='content'>\n\t\t\t\t\t<h3>Choose a character to retrieve their film list: </h3>\n\t\t\t\t\t<form className=\"btn-group\">\n\t\t\t\t\t\t<NameBox handleClick={this.handleChange} name='Luke Skywalker' value='1' />\n\t\t\t\t\t\t<NameBox handleClick={this.handleChange} name='Darth Vader' value='4'/>\n\t\t\t\t\t\t<NameBox handleClick={this.handleChange} name='Obi-wan Kenobi'  value='10'/>\n\t\t\t\t\t\t<NameBox handleClick={this.handleChange} name='R2-D2' value='2'/>\n\t\t\t\t\t</form>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<h4>Results for: {selectedCharacter}</h4>\n\t\t\t\t\t<div className=\"results-table\">\n\t\t\t\t\t\t{isLoaded ? results.map((film, i) => <FilmTile film={film} key={i} />)\n\t\t\t\t\t\t: this.handleResults()}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n}\n\nexport default CharacterSearch;","import React from 'react';\nimport logo from './assets/starwars.png';\nimport './App.css';\nimport CharacterSearch from './components/characterSearch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div className='body'>\n        <CharacterSearch />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}